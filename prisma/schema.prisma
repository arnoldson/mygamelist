generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  username      String?     @unique
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  gameEntries   GameEntry[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GameEntry {
  id          String    @id @default(cuid())
  userId      String
  rawgGameId  Int       // RAWG API game ID
  title       String
  status      Int       @db.SmallInt // 1-5 corresponding to GameListType enum
  rating      Int?      @db.SmallInt // 1-10 rating scale
  review      String?
  hoursPlayed Int?      @default(0)
  startedAt   DateTime?
  completedAt DateTime?
  addedAt     DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, rawgGameId])
}